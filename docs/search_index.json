[["index.html", "The Graduate Student’s Guide to Data Curation Chapter 1 Introduction 1.1 What is this guide 1.2 How to use this resource", " The Graduate Student’s Guide to Data Curation Summer Mengarelli and Mikala Narlock Chapter 1 Introduction 1.1 What is this guide This guide is designed for graduate students working in a research lab who are tasked with managing research data. In this guide, you will find individual lessons on specific aspects of data management. These are geared towards active data management, meaning projects that are in process. These data are being updated, collected, aggregated, processed, cleaned, or analyzed on a regular basis. In other words, the focus of this material is how to integrate solid data management practices into your work without requiring a complete retooling of existing workflows and processes. This guide has been published through bookdown via GitHub. [Publication date of the guide, citation, w/e] This guide has been written by two librarians who are also active researchers. Each author has joined existing projects and launched new ones. We have pulled on best practices from our education and lived experiences. 1.2 How to use this resource While the content of each lesson varies, you will generally learn definitions, recommended practices, and tips for integrating said practices into new and existing workflows. Each lesson is designed to be a standalone object for point of need adoption. In other words, when you realize you need more information about annotating code, creating a README, or keeping your data safe, you can jump right to that lesson. The lessons are ordered roughly according to a typical research lifecycle, but it is not necessary to complete prior lessons in order to understand and apply what you need. This guide should be considered a starting point: the general recommendations may not be specific enough for your needs. In each lesson, we have provided additional resources and links to other portions of the guide. However, there are many resources available online and likely at your institution to provide the support you may need – we suggest looking into whether your institution’s library has support for research data management, or reaching out to your institutional office of research. All resources are only as valuable as they are to you. While we have captured and distilled recommended practices in this guide, consider which of these are useful or not in your research. "],["situating-yourself-in-the-research-lifecycle.html", "Chapter 2 Situating Yourself in the Research Lifecycle 2.1 Learning Objective 2.2 Key Terms 2.3 The Lesson 2.4 Further reading", " Chapter 2 Situating Yourself in the Research Lifecycle Or, how to navigate through data management. 2.1 Learning Objective Understand the general research lifecycle and how robust data management practices can mitigate challenges caused by temporal gaps in research projects. 2.2 Key Terms Research Lifecycle: The process of conducting research, from inception, through data collection and analysis, to publication. Presented as a lifecycle, as data and publications can be reused by other researchers in the design of additional projects. Research Data Management: The processes, tools, and techniques necessary for collecting, analysing, storing, and publishing data. Temporal Gaps: Periods of time between research activities. 2.3 The Lesson All research projects follow a general lifecycle: from planning and design, through to implementation (which includes data collection and analysis), and concluding with concluding with output sharing (including research publishing and data depositing) and reuse, where the cycle begins again, with a new iteration of the same project or the development and launch of a new investigation. \\[add in lifecycle image from Harvard\\] Cioffi, M., Goldman, J., &amp; Marchese, S. (2023). Harvard Biomedical Research Data Lifecycle (Version 5). Zenodo. https://doi.org/10.5281/zenodo.8076168 While the lifecycle image invokes a tidy overview of how research projects generally progress, the reality is often more complex. For example, a project may require iterations of design and data collection before moving to analysis and publication. This can be compounded by changes in disciplinary research practices and policies at institutional, state, and federal levels. This messy reality of research projects means that there can be temporal gaps in research; in other words, for various reasons, projects may start and stop over time. These temporal gaps can be most acutely felt as personnel join and depart projects. Robust data management practices can be invaluable for closing those gaps and easing team members’ transitions in and out of a research project. In the remainder of this guide, you’ll learn more about different aspects of research data management that will make it easier for you to get acclimated to your lab’s research data, as well as prepare it for your eventual departure from the lab/project (which in turn will make it easier for the next research collaborator!). \\[add in a mechanism to encourage students to click the next one, like a table of contents or sentence based links to the rest of the content\\] 2.4 Further reading Research lifecycle guide (Princeton) Research Data Management Workbook Data Management and Sharing Activities (ARL) "],["getting-oriented-to-a-dataset.html", "Chapter 3 Getting Oriented to a dataset 3.1 Learning Objective(s) 3.2 Key terms 3.3 The lesson 3.4 In conclusion 3.5 Any exercises 3.6 Further readings 3.7 References", " Chapter 3 Getting Oriented to a dataset Or, how to find your bearings in an existing dataset. 3.1 Learning Objective(s) Learn and adapt data curation strategies to become acclimated to a dataset you’ve inherited. 3.2 Key terms Data Curation: The tasks by which data is reviewed to ensure it is fit for purpose. Directory: A folder within a computer’s file system, which might contain other folders (subdirectories) and/or files. README: A document, typically written in Markdown or as plain text, that serves as the front page or abstract of a project’s materials – for example, the source code and data files used in a research project – and conveys information about the purpose, creation, organization, and use of the materials. Data Dictionary: Documentation that accompanies a dataset, listing and defining each variable and providing information on data types, conventions followed, and valid/possible values for each variable. Raw data: Here, data in the state it is in when you generate/access/receive it. ORCID iD: A unique persistent identifier to disambiguate researchers and track research outputs. 3.3 The lesson When starting or joining an existing project, or even taking previously created data to launch a new project, it is crucial to spend time acclimating to the dataset you plan to use. Spending the time now to get oriented will help avoid errors. However, approaching a dataset without a plan, especially if it is a complicated or particularly large resource, can be overwhelming. To help with that, integrate data curation strategies. Data curation, or the tasks by which data is reviewed to ensure it is fit for purpose, provides a structured method to engage with data. In general, data curation tasks include: Creating a comprehensive listing of files in the dataset. If a listing already exists, making sure all files are present. Reviewing the documentation to ensure variables are defined, methodology is present and clear, and descriptive information is thorough. If applicable, running code to ensure it works as expected, dependencies are named, and code has clear annotation (link to Annotating Code). This process often occurs at the end of a research project, when outputs are being published in repositories. However, these practices can be adopted and adapted for finding your way through a new and unfamiliar dataset, since data curation strategies offer standardized yet flexible approaches to understanding a dataset. Below, we offer a general framework, divided into practices.1 This process can be used for all data types, across all disciplines. 3.3.1 Practice #1: Check and Understand the documentation and dataset First and foremost, get access to the data and documentation. This may seem like a no brainer, but sometimes data can be distributed in multiple locations. Make sure you have access to all of the data and affiliated documentation. Ask your PI, peers, and others in the lab about data and affiliated documentation to make sure you have access to everything. This may require getting access to servers, added to shared drives or networked storage, or even being shown where the physical records are kept. You may even need to follow hyperlinks that lead to other storage folders– that is ok! This process may take time. Do not rush this step though, as all future steps build from it. After that, begin by reviewing the documentation. Look for READMEs, dictionaries, or other overview documentation that will help you learn more about the methodology, expected data files, and the project overall. If this is an ongoing project which has been written about before, and you have not already, consider reading any previous publications or reviewing any publicly available datasets. ACTION: As you review the documentation, start your own review log. This is for your use, and your use only– so don’t be afraid to add to it, remove from it, whatever you need to do to get your thoughts together. Use it as a way to annotate your journey through the documentation, which you’ll expand on. ———————————————- TEMPLATE SNIPPET: Documentation reviewed Dictionary Important points Questions README Important points Questions Article(s) Important points Questions … ———————————————- Now, repeat the process with the actual data files. As much as possible, avoid making copies of the data, as that will lead to file proliferation. In general, you want to create as few derivatives of key files as reasonably possible to avoid confusion as to which file is the correct version– especially when you are collaborating in a lab. That being said, you will need to take care reviewing the raw data files, or the source data collected from instruments or observation from which other data or visualizations will be derived, when possible. Especially as you are getting your bearings in the data, it can be easy to accidentally alter or even delete data, occasionally in an irreversible way. If you feel you absolutely must make copies of the data, store the files in a working directory on your local machine (if possible given the size of the data) and remove the files as soon as you have completed your review. ACTION: Here, document what you’ve reviewed and questions you may have. Pay close attention to the folders that you have reviewed so you do not accidentally revisit data– but don’t be afraid to circle back to documentation or other parts of the data as you are forming connections to the different materials! ———————————————- TEMPLATE SNIPPET: Data reviewed \\[Directory 1\\] Important points Questions \\[Directory 2\\] Important points Questions \\[Directory 3\\] Important points Questions … ———————————————- 3.3.2 Practice 2: Request information and augment the documentation After you have explored the data and documentation, pause to synthesize for yourself: what have you learned? What questions do you still have? ACTION: At this point, divide your questions into three categories: Critical, Important, and Nice to know. Critical: These questions must be answered before you feel comfortable proceeding with your role. While this will depend on your position and research, some examples of critical questions include: Undefined or unclear variables Missing units of measurement Undefined or unclear relationships between different files Important: These questions need to be answered soon, but are not an impediment to your role. Some examples of important questions include: Data versioning process and how to document changes to the data Unclear data analysis processes, such as via scripts Quality assurance or review process for data collection Data storage and backup mechanisms Nice to know: These questions will provide useful information at a future stage of the research project. Consider asking them at regular meetings with your PI or peers. Some examples of nice to know questions include: Who has access to the data currently The long-term plan for sharing or destroying the data At this stage, also consider who needs to answer each question. All of this is leading to an important rule of thumb: in order to get the answers you need, ask no more than 4 questions at once– especially via email– of one person (Hudson Vitale et al, 2024). This will help ensure you get the answers you need to be successful. Once you have the critical questions answered, consider if there are changes you can make to the documentation in isolation. For example, if you have learned what a snippet of code does, which is currently not annotated, can you add that in? Can you draft a README? In contrast, you likely cannot change how data are being collected or analyzed. Note: There may be no changes you are comfortable making on your own– that is ok! You can also ask a colleague or your PI to review the proposed changes before you make them. ACTION: Using what you’ve learned, augment the dataset documentation. If you are not comfortable updating the project-level documentation, at the minimum update your personal documentation. 3.3.3 Practice 3: Transform practices and evaluate regularly As you transition from learning about the dataset to contributing to it, remain cognizant of the workflows and documentation. Consider, in particular, the questions you initially had when looking through the data. Are there ways you could consistently improve the practices of the lab to make it easier for future students? Revisit this question on a periodic basis, such as quarterly. ACTION: Over time, especially as you feel more secure in the project or lab, consider suggesting changes to the data management process. This could include things like, adjusting the file naming convention, implementing a more robust version management tool, or even just improving the documentation. This may not be something you can do right away– but it is never too late to integrate small changes to have a big impact on the research data. ACTION: Add a quarterly meeting to your calendar, or even your project team’s calendar, to review your processes and consider what can be improved. ———————————————- TEMPLATE SNIPPET: Data Management Practices Quarterly Review Meeting (Team wide) Did anyone leave the lab that needs to be removed from the project (in other words, are there any accounts that need to be removed to ensure no one outside of the project has access) Are there any files that need to be deleted Has our documentation been updated recently Can we confirm our backup system is running as expected Do our files all follow the file-naming convention During the last three months, have we made any changes to our collection process? If yes, have they been documented? During the last three months, have there been any challenges to the data collection or management process? If yes, can we mitigate these by changing our workflow? Data Management Practices Quarterly Review (self) Do I have any duplicate or extraneous files on my local machine that need to be deleted Is my local documentation up to date? Has this/can it be added to the team documentation? Is my code documented ———————————————- 3.3.4 Practice 4: Document your work During your conversations, when you make data management decisions, or change processes, be sure to capture everything. Even in situations where no changes are made, document why and if the topic should be revisited at a future date. Combining the snippets from above, and repeated as necessary, you have your Data Management Log! Some good practices for your documentation: Create a header for your documentation Created by: (Name, ORCiD) Role in lab/project: Date range covered: (Start Date-End date) Add dates to each entry Add entries in reverse chronological order (more recent info goes at the top) Be specific. Do not assume you will remember an abbreviation in six months. ACTION: Review your documentation alongside your data management practices, approximately quarterly. Documentation can be easy to fall behind on, but staying on top of it now will make future efforts (such as writing the methodology of you paper) easier. ———————————————- DATA MANAGEMENT LOG TEMPLATE Created by: (Name, ORCiD) Role in lab/project: Date range covered: (Start Date-End date) YYYY-MM-DD Changes made to data files (generally) Documentation updated Code created, edit …. ———————————————- 3.4 In conclusion As you progress in your career, remember: You are the first curator of your data. All actions you take shape the final outcome of a dataset and how reusable (or not) it is, both to yourself and future researchers. 3.5 Any exercises Using the practice dataset… 3.6 Further readings Data Curation Primers: Created and managed by the Data Curation Network, these are resources created for data stewards when reviewing different data types. CURATE(D) Steps: The process by which data curators review datasets. Generalized workflow, mostly for teaching. 3.7 References Hudson Vitale, Cynthia; Hadley, Hannah; Wham, Briana; Borda, Susan; Carlson, Jake; Darragh, Jennifer; Fearon, David; Herndon, Joel; Hunt, Shanda; Johnston, Lisa R.; Kalt, Marley; Kozlowski, Wendy; Lafferty-Hess, Sophia; Marsolek, Wanda; Moore, Jennifer; Narlock, Mikala; Scott, Dorris; Wheeler, Jon; Woodbrook, Rachel; Wright, Sarah; Yee, Michelle; Lake, Sherry. (2024). CURATE(D) Fundamentals Workshop. Retrieved from the University Digital Conservancy, https://doi.org/10.24926/2024.265916. These have been adapted from the Data Curation Network’s CURATE(D) Steps.↩︎ "],["navigating-and-organizing-files.html", "Chapter 4 Navigating and Organizing Files 4.1 Lesson Objective 4.2 Key Terms 4.3 Lesson 4.4 Exercises 4.5 Further Readings", " Chapter 4 Navigating and Organizing Files Or, how to keep your project materials neatly stored. 4.1 Lesson Objective Understand the directory structure on your computer, file naming conventions and how to use them to organize your project files. 4.2 Key Terms Directory: A folder within a computer’s file system, which might contain other folders (subdirectories) and/or files. Hierarchical Structure: A structure defined by objects nested within objects, stemming from a single, highest-level “root” object. In the case of a computer’s file system, this refers to the way that files and subdirectories are nested within higher-level directories, up to the root of the system. Absolute Path: The path, or address, from the root of a computer’s file system to a directory or file of interest. Raw Data: Here, data in the state it is in when you generate/access/receive it. Relative Path: The path, or address, to a directory or file of interest, relative to the current working directory. Working Directory: The directory within your computer’s file system that you are currently “in;” the directory that a computer program can currently see or access. 4.3 Lesson Taking a few minutes to organize your research project files is one of the easiest steps you can take to help yourself and potential collaborators in the future. It may be tempting to let files rest where they lie – a desktop or a Google Drive, for example – and simply use your computer or Google’s search bar to find files by their names. Maybe you’ve already taken the extra step of establishing a folder specifically for this project, and you make sure that you save all new or altered project files in that folder. This is a good first step, but a few more intentional layers of organization will be hugely beneficial to you, both now and in the future. This lesson will introduce you to your computer’s file system (which you’ve almost certainly traversed, but may not fully understand) and give some brief suggestions for how to organize your project within that system. It also covers file naming conventions – why they’re worth thinking about, and how you might implement them. 4.3.1 The hierarchy of a computer file system When you click “Download” on a file you’ve found online, you probably know where to go to find it: your Downloads folder. This is a folder, or directory (this lesson will use the terms folder and directory interchangeably). You may not know that the Downloads folder, as well as the Desktop, Documents, Pictures, and other built-in folders, are contained within another, higher-level directory: your user directory. Your user directory – on an institutional computer, this is probably named after your institutional ID – is inside a Users folder, which is inside your computer’s root folder. In this paragraph, we have journeyed backwards from Downloads to the root directory. We can represent this route in a single line, which will look slightly different if your computer is a Mac or Windows machine: Mac: /Users/yourname/Downloads Windows: C:\\Users\\yourname\\Downloads For Mac machines, the first forward slash (/) represents the root of the file structure; this is the same as the C: in the Windows example. In either case, this is the path, or address, to the Downloads folder from the root. In addition to saving files in the built-in folders on your computer, you can, of course, make your own folders. For example, you might make a folder called Fall-2026 inside your Documents folder, with the intention of storing all your coursework for the Fall 2026 semester within. Because it is inside the Documents folder, Fall-2026 is a subdirectory of Documents. You could make more subdirectories within Fall-2026, maybe to organize coursework by course. This might look something like this: ![A diagram showing a hierarchical file structure.][photos/organizing-files.png] Just like we wrote a path to the Downloads folder before, we can construct a path to a given coursework file in this imaginary structure. Let’s say we’re interested in the project_data.xlsx folder, which is in the subdirectory for the course si676. We’ll write the path assuming that it’s on a Windows machine belonging to the user kevinq. Which of the following is the correct path? A. Users B. /Users/kevinq/Documents/Fall-2026/si676/project_data.xlsx C. **C: When a path begins all the way at the root directory, like the example above, it’s called the absolute path to the file or folder of interest. Imagine that this is like the full list of directions from an origin – your place of residence – to a destination – your office or favorite study area on campus. The absolute path shows every nested folder that needs to be navigated to reach the target. But what if we’re already in the Fall-2026 folder? In our directions analogy, this would be like needing directions to your destination from somewhere on campus: you are already part of the way there, and you only need directions for the final few steps. We need to construct a relative path, which gives the directions to our target file (or folder) relative to wherever we currently “are” in the hierarchy. From Fall-2026 to project_data.xlsx, on a Windows computer, this would look like this: .\\si676\\project_data.xlsx In relative paths, the period (.) at the beginning represents the current working directory, or where you currently “are” – in this case, the Fall-2026 folder. Now that you have an in-depth understanding of the file system on your computer, let’s cover some recommendations for how to organize your project files within that system. 4.3.2 A recommended approach to project organization Given that what files are used and produced during a research project varies widely across projects, labs, and disciplines, the advice here will be broad, and it is up to you to consider how it can be applied to your work. The main thing to remember is that at this moment, while you are managing your research project, you are the expert in the data and associated files. This is both a responsibility and an opportunity: regardless of the state of the project when you came aboard, you can leave it better than you found it by adapting these recommendations for your files. Practice 1: Keep project materials together As a first step, gather all the “stuff” of your project – raw data files, processed data, documentation, research code, image files, and anything else involved in the work – into one location. This might be a Google Drive or Box folder, or a subfolder you’ve created in your Documents or elsewhere on your computer. (NOTE: This lesson does not give recommendations on backing up files, creating duplicate copies, or storing some aspects of the project on other systems, like pushing your code to GitHub. For more information on storage, please consult the Keeping Your Data Secure lesson.) Aside from knowing where everything is, one benefit of starting with all your materials in a single location is that you can easily share the project file with new collaborators and be assured that they have access to everything they need for onboarding. Additionally, if you work with your materials computationally, regardless of how you further organize the materials within the main project folder, the files will all be fairly near to each other. This lends itself to short and uncomplicated relative paths from one file to another: you can set your working directory to the main project folder and jump around within subdirectories as needed. Practice 2: Group files into logical subdirectories From this main folder, we recommend that you subdivide materials by file type and/or by project workflow. This is where the nature of your specific project will dictate how you apply this recommendation: it might make sense to keep all code in a subfolder called code or scripts, or it might better align with your workflow to store each individual script in the subfolder for its process – one script in a data-cleaning folder and another in a data-visualization folder, for example. It is also worth considering what a “thing” is for your project materials: is there a one-to-one relationship between files and things? For example, does a single image file stand on its own, with one image per research object, or do you have several images of the same object, which need to be treated as a unit? Is the data for a given process a single file, or is your data stored in a complex format that actually requires several different file types? (A common example of this is spatial data. The ESRI shapefile is actually a collection of several geographic and indexing file extensions.) In any case where there is a many-to-one relationship between files and the “thing” that the files comprise, be sure to store all the files for a given research object in their own folder. It’s generally a good idea to keep “raw” data (where raw means whatever state the data is in when you generate/access/receive it) separate from processed/altered versions of that data. Create a new subfolder, in the main project folder or nested within the appropriate subfolder, and have all your data manipulating or processing code output the new data files into that location. It’s crucial that you and any of your current or future collaborators can quickly tell the difference between raw and altered data, so be sure to name the folders where versions of the data are stored in a clear and consistent manner. Practice 3: Employ file naming conventions The goal of establishing a file naming convention is to avoid the common problem of trying to determine whether “project_data(2).xlsx” or “project_data_final(1).xslx” is the version of the data you need. Conventions – rules that dictate what information should be included in a file name, and how that information should be formatted – ensure that versioning information is clear and that you can tell at a glance what any file in your project contains. What conventions make sense for you will depend closely on the file formats, quantity, and complexity of your project materials, and you may have limited autonomy to rename existing project files. The suggestions below can be adapted as needed, and if you are unable to apply them retroactively to the materials you’ve inherited in your lab, you can still apply them to the materials you produce. First, if you use any computer programs in your research, we strongly recommend getting into the habit of not including spaces in your folder and file names. Many applications fail to recognize white spaces and will handle your files/folders in unexpected ways – for example, for a file named “Cover Letter.pdf” a program might see “Cover” and “Letter.pdf” as two separate objects. Instead, it’s common to use an underscore (_) where a white space would normally occur. You can also use dashes (-) or camel casing (writeFileNamesLikeThis). From that starting point, imagine your folders and files as moving boxes, and the names you give them as the labels you scrawl on the boxes (“Pots - Kitchen” or “FRAGILE!”). What information do you need to include so that your future self or collaborators will know where things are? Taking into account how your computer system will sort files, put the most important information first: if you want to be able to search for files by date, start every file with its creation date. Be sure to format dates uniformly; we recommend the format YYYYMMDD. Other components of a file or folder name might include abbreviations or full sample IDs, lab location, researcher name, or other important information. If you use abbreviations, be sure to define them in your README. To keep track of versions of the same data, end the file name with a standardized versioning annotation, like “_v03”. Finally, generally avoid special characters, like %!$@. Some resources to help you plan your file naming conventions are linked below, but we want to highlight our favorite, which is Kristin Briney’s File Naming Convention Worksheet. Whatever conventions you determine are appropriate for your work, document them! This will be useful to remind yourself, and it also gives you the opportunity to pass the information on as onboarding material for future members of the lab. 4.3.3 Conclusion Organizing your materials with a logical flow and using clear and consistent naming conventions is a massive first step in improving your project’s data management practices, and these recommendations should not take you more than a working session to implement. Once all your files are in working order, your next steps will be to ensure that the data within those files is standardized and documented as much as possible and that the code in your scripts is well-annotated. Along the way, you can begin to fill out READMEs for your project as a whole and for individual files or processes; these will be slotted into the file organization you established in this lesson and provide a “Start Here!” place for future collaborators to become oriented to the project. 4.4 Exercises 4.5 Further Readings UC Davis DataLab lesson on navigating the file system in the command line: https://ucdavisdatalab.github.io/workshop_introduction_to_the_command_line/navigation.html MIT Worksheet: Naming and Organizing your Files and Folders by MIT Libraries Data Management Services.Copyright © 2020-04-24 MASSACHUSETTS INSTITUTE OF TECHNOLOGY, licensed under a Creative Commons Attribution 4.0 International License except where otherwise noted. \\[[https://creativecommons.org/licenses/by/4.0/](https://creativecommons.org/licenses/by/4.0/)\\]. Access at https://www.dropbox.com/scl/fi/1zd63iszw33rh4hjcu1dl/Worksheet_fileOrg.docx?rlkey=q0t25t1wttp4qx2p1ne39qfhd&amp;dl=0. UC Merced LibGuide on File and Folder Organization: https://library.ucmerced.edu/file-and-folder-organization#:~:text=File%20Structures,want%20when%20looking%20up%20files Briney, Kristin A. 2020. “File Naming Convention Worksheet”. June 2. https://doi.org/10.7907/894q-zr22. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
